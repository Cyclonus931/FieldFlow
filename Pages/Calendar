
import React, { useState, useEffect } from 'react';
import { Appointment } from '@/entities/Appointment';
import { Contractor } from '@/entities/Contractor';
import { User } from '@/entities/User';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from '@/components/ui/dialog';
import { 
  Calendar as CalendarIcon, 
  MapPin, 
  UserCheck, 
  Clock, 
  ChevronLeft,
  ChevronRight,
  Loader2
} from 'lucide-react';
import { 
  startOfWeek, 
  endOfWeek, 
  eachDayOfInterval, 
  format, 
  addDays, 
  subDays, 
  addWeeks, 
  subWeeks, 
  startOfMonth, 
  endOfMonth, 
  isSameMonth, 
  isToday,
  addMonths,
  subMonths 
} from 'date-fns';
import { he } from 'date-fns/locale';
import { cn } from "@/lib/utils";
import { PermissionGate } from '../components/auth/PermissionGate';

// צבעים לקבלנים שונים
const contractorColors = [
  'bg-blue-200 border-blue-400 text-blue-800',
  'bg-green-200 border-green-400 text-green-800',
  'bg-purple-200 border-purple-400 text-purple-800',
  'bg-orange-200 border-orange-400 text-orange-800',
  'bg-pink-200 border-pink-400 text-pink-800',
  'bg-indigo-200 border-indigo-400 text-indigo-800',
  'bg-teal-200 border-teal-400 text-teal-800',
  'bg-red-200 border-red-400 text-red-800',
];

const getContractorColor = (contractorId) => {
  if (!contractorId) return contractorColors[0];
  let hash = 0;
  for (let i = 0; i < contractorId.length; i++) {
    const char = contractorId.charCodeAt(i);
    hash = ((hash << 5) - hash) + char;
    hash |= 0; // Convert to 32bit integer
  }
  const index = Math.abs(hash) % contractorColors.length;
  return contractorColors[index];
};

const statusColors = {
  'מתוכנן': 'bg-blue-100 text-blue-800',
  'בביצוע': 'bg-yellow-100 text-yellow-800',
  'הושלם': 'bg-green-100 text-green-800',
  'בוטל': 'bg-red-100 text-red-800',
};

// פונקציה לחישוב מיקום תיאומים חופפים
const calculateOverlapPositions = (appointments, targetHour) => {
  // מצא את כל התיאומים שחופפים לשעה הנבדקת
  const overlappingAppointments = appointments.filter(apt => {
    const [startHour] = apt.time_slot.split('-')[0].split(':').map(Number);
    const [endHour] = apt.time_slot.split('-')[1].split(':').map(Number);
    
    // An appointment overlaps if its time slot spans over the targetHour
    // e.g., 9:00-11:00 overlaps with 9, 10
    return targetHour >= startHour && targetHour < endHour;
  }).sort((a, b) => {
    // Sort by start time for consistent layout
    const [aStartHour, aStartMinute] = a.time_slot.split('-')[0].split(':').map(Number);
    const [bStartHour, bStartMinute] = b.time_slot.split('-')[0].split(':').map(Number);
    if (aStartHour !== bStartHour) return aStartHour - bStartHour;
    return aStartMinute - bStartMinute;
  });

  return overlappingAppointments.map((apt, index) => {
    const totalOverlaps = overlappingAppointments.length;
    const widthPercentage = 95 / totalOverlaps; // חלוקת הרוחב בין התיאומים, עם רווח קטן
    const rightPosition = (index * widthPercentage); // מיקום מימין
    
    return {
      ...apt,
      widthPercentage,
      rightPosition,
      zIndex: index + 1
    };
  });
};

// רכיב מקרא הצבעים
const ContractorLegend = ({ contractors, appointments }) => {
  // מציאת קבלנים שיש להם תיאומים פעילים
  const activeContractorIds = [...new Set(
    appointments
      .filter(apt => apt.status !== 'בוטל')
      .map(apt => apt.contractor_id)
  )].filter(Boolean);

  const activeContractors = contractors.filter(contractor => 
    activeContractorIds.includes(contractor.contractor_id)
  );

  if (activeContractors.length === 0) {
    return null;
  }

  return (
    <Card className="bg-white/80 backdrop-blur-sm shadow-md border border-gray-200 mb-4">
      <CardContent className="p-4">
        <div className="flex items-center gap-2 mb-3">
          <div className="w-4 h-4 bg-gradient-to-r from-blue-500 to-green-500 rounded-full"></div>
          <span className="font-medium text-gray-700">מקרא קבלנים:</span>
        </div>
        <div className="flex flex-wrap gap-2">
          {activeContractors.map(contractor => (
            <div 
              key={contractor.contractor_id}
              className={`flex items-center gap-2 px-3 py-1 rounded-lg border-2 text-sm ${getContractorColor(contractor.contractor_id)}`}
            >
              <div className="w-3 h-3 rounded-full bg-current opacity-60"></div>
              <span className="font-medium">{contractor.name}</span>
            </div>
          ))}
        </div>
      </CardContent>
    </Card>
  );
};

// הגדרות היומן
const HOURS = Array.from({ length: 12 }, (_, i) => i + 8); // 08:00 - 19:00

// רכיבי תצוגה חדשים
const MonthView = ({ currentDate, appointments, onAppointmentClick, contractors }) => {
  const monthStart = startOfMonth(currentDate);
  const monthEnd = endOfMonth(currentDate);
  const startDate = startOfWeek(monthStart, { weekStartsOn: 0 }); // Sunday
  const endDate = endOfWeek(monthEnd, { weekStartsOn: 0 });
  
  const days = eachDayOfInterval({ start: startDate, end: endDate });
  const dayNames = ['א', 'ב', 'ג', 'ד', 'ה', 'ו', 'ש'];

  return (
    <div className="flex-1 grid grid-cols-7 grid-rows-auto bg-white/80 backdrop-blur-sm shadow-lg rounded-xl border border-blue-200 overflow-hidden">
      {dayNames.map(name => (
        <div key={name} className="text-center font-bold p-2 border-b border-l border-blue-100 text-blue-800 bg-blue-50">
          {name}
        </div>
      ))}
      {days.map((day, index) => {
        const dayAppointments = appointments.filter(
          apt => format(new Date(apt.appointment_date), 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd')
        );

        return (
          <div 
            key={day.toString()} 
            className={cn(
              "border-b border-l border-blue-100 p-2 min-h-[120px] flex flex-col transition-colors duration-300",
              !isSameMonth(day, currentDate) && "bg-gray-50 text-gray-400",
              isToday(day) && "bg-blue-100"
            )}
          >
            <span className={cn("font-semibold", isToday(day) ? "text-blue-600" : "")}>
              {format(day, 'd')}
            </span>
            <div className="flex-1 space-y-1 mt-1 overflow-y-auto">
              {dayAppointments.map(apt => (
                <div 
                  key={apt.id} 
                  onClick={() => onAppointmentClick(apt)}
                  className={cn(
                    "p-1 rounded-md text-xs cursor-pointer truncate",
                    apt.status === 'בוטל' ? 'bg-gray-300 text-gray-600 line-through' : getContractorColor(apt.contractor_id)
                  )}
                >
                  {apt.settlement_name}
                </div>
              ))}
            </div>
          </div>
        );
      })}
    </div>
  );
};

const WeekView = ({ currentDate, appointments, onAppointmentClick, contractors }) => {
  const week = eachDayOfInterval({
    start: startOfWeek(currentDate, { weekStartsOn: 0 }),
    end: endOfWeek(currentDate, { weekStartsOn: 0 }),
  });

  return (
    <div className="flex-1 grid grid-cols-8 grid-rows-1" style={{ minHeight: '70vh' }}>
      <div className="col-span-1 text-center text-sm text-gray-500">
        {HOURS.map(hour => (
          <div key={hour} className="h-20 flex items-center justify-center border-t border-gray-200">
            {`${String(hour).padStart(2, '0')}:00`}
          </div>
        ))}
      </div>
      
      {week.map(day => {
        const dayAppointments = appointments.filter(
          apt => format(new Date(apt.appointment_date), 'yyyy-MM-dd') === format(day, 'yyyy-MM-dd')
        );
        
        return (
          <div key={day.toString()} className="col-span-1 border-r border-gray-200 bg-white/50">
            <div className="text-center p-2 border-b border-gray-200">
              <p className="font-semibold text-gray-700">{format(day, 'EEE', { locale: he })}</p>
              <p className="text-2xl font-bold text-gray-800">{format(day, 'd')}</p>
            </div>
            <div className="relative h-full">
              {HOURS.map(hour => <div key={hour} className="h-20 border-t border-dashed border-gray-200"></div>)}
              
              {/* רינדור תיאומים עם מניעת חפיפה */}
              {HOURS.map(hour => {
                const hourAppointments = calculateOverlapPositions(dayAppointments, hour);
                
                return hourAppointments.map(apt => {
                  const [startHour] = apt.time_slot.split('-')[0].split(':').map(Number);
                  const [endHour] = apt.time_slot.split('-')[1].split(':').map(Number);
                  
                  // רק אם התיאום מתחיל בשעה הזו או לפניה
                  // We only render the appointment once, at its exact start hour,
                  // but its visual height will span its full duration.
                  if (startHour !== hour) return null;
                  
                  const top = (startHour - 8) * 5; // 5rem per hour, starting from 8am (h-20)
                  const height = (endHour - startHour) * 5; // Height based on duration, 5rem per hour
                  const isCancelled = apt.status === 'בוטל';
                  
                  return (
                    <div
                      key={apt.id}
                      className={`absolute p-1 rounded-lg shadow-md cursor-pointer transition-all text-xs ${
                        isCancelled 
                          ? 'bg-gray-200 border-gray-300 text-gray-500 opacity-60 hover:opacity-80' 
                          : getContractorColor(apt.contractor_id)
                      }`}
                      style={{ 
                        top: `${top}rem`, 
                        height: `${height}rem`,
                        right: `${apt.rightPosition}%`,
                        width: `${apt.widthPercentage}%`,
                        zIndex: apt.zIndex
                      }}
                      onClick={() => onAppointmentClick(apt)}
                    >
                      <p className={`font-bold text-xs truncate ${isCancelled ? 'line-through' : ''}`}>
                        {apt.settlement_name}
                      </p>
                      <p className="text-xs truncate">{apt.contractor_name}</p>
                      <p className="text-xs truncate">{apt.task_type}</p>
                      {isCancelled && (
                        <Badge className={`absolute bottom-0 left-0 text-xs ${statusColors[apt.status]}`}>
                          {apt.status}
                        </Badge>
                      )}
                    </div>
                  );
                });
              })}
            </div>
          </div>
        );
      })}
    </div>
  );
};

const DayView = ({ currentDate, appointments, onAppointmentClick, contractors }) => {
  const dayAppointments = appointments.filter(
    apt => format(new Date(apt.appointment_date), 'yyyy-MM-dd') === format(currentDate, 'yyyy-MM-dd')
  );

  return (
    <div className="flex-1 grid grid-cols-1 md:grid-cols-[100px_1fr]" style={{ minHeight: '70vh' }}>
      <div className="text-center text-sm text-gray-500 hidden md:block">
        {HOURS.map(hour => (
          <div key={hour} className="h-20 flex items-center justify-center border-t border-gray-200">
            {`${String(hour).padStart(2, '0')}:00`}
          </div>
        ))}
      </div>
      
      <div className="border-r border-gray-200 bg-white/50">
        <div className="relative h-full p-2 md:p-0">
          <div className="md:hidden">
             {dayAppointments.length === 0 && <div className="text-center pt-10 text-gray-500">אין תיאומים להיום</div>}
             {dayAppointments.map(apt => {
                 const isCancelled = apt.status === 'בוטל';
                 return (
                    <div
                      key={apt.id}
                      className={`mb-2 p-3 rounded-lg shadow-md cursor-pointer transition-all ${isCancelled ? 'bg-gray-200 border-gray-300 text-gray-600 opacity-70' : getContractorColor(apt.contractor_id)}`}
                      onClick={() => onAppointmentClick(apt)}
                    >
                      <p className="font-bold text-md">{apt.time_slot}</p>
                      <p className={`font-semibold text-sm truncate ${isCancelled ? 'line-through' : ''}`}>{apt.settlement_name}</p>
                      <p className="text-xs truncate">{apt.contractor_name}</p>
                      {isCancelled && <Badge className={`mt-2 text-xs ${statusColors[apt.status]}`}>{apt.status}</Badge>}
                    </div>
                 );
             })}
          </div>

          <div className="hidden md:block relative h-full">
            {HOURS.map(hour => <div key={hour} className="h-20 border-t border-dashed border-gray-200"></div>)}
            
            {/* רינדור תיאומים עם מניעת חפיפה */}
            {HOURS.map(hour => {
              const hourAppointments = calculateOverlapPositions(dayAppointments, hour);
              
              return hourAppointments.map(apt => {
                const [startHour] = apt.time_slot.split('-')[0].split(':').map(Number);
                const [endHour] = apt.time_slot.split('-')[1].split(':').map(Number);
                
                // רק אם התיאום מתחיל בשעה הזו
                if (startHour !== hour) return null;
                
                const top = (startHour - 8) * 5; // 5rem per hour, starting from 8am (h-20)
                const height = (endHour - startHour) * 5; // Height based on duration, 5rem per hour
                const isCancelled = apt.status === 'בוטל';
                
                return (
                  <div
                    key={apt.id}
                    className={`absolute p-1 rounded-lg shadow-md cursor-pointer transition-all text-xs ${
                      isCancelled 
                        ? 'bg-gray-200 border-gray-300 text-gray-500 opacity-60 hover:opacity-80' 
                        : getContractorColor(apt.contractor_id)
                    }`}
                    style={{ 
                      top: `${top}rem`, 
                      height: `${height}rem`,
                      right: `${apt.rightPosition}%`,
                      width: `${apt.widthPercentage}%`,
                      zIndex: apt.zIndex
                    }}
                    onClick={() => onAppointmentClick(apt)}
                  >
                    <p className={`font-bold text-xs truncate ${isCancelled ? 'line-through' : ''}`}>
                      {apt.settlement_name}
                    </p>
                    <p className="text-xs truncate">{apt.contractor_name}</p>
                    <p className="text-xs truncate">{apt.task_type}</p>
                    {isCancelled && (
                      <Badge className={`absolute bottom-0 left-0 text-xs ${statusColors[apt.status]}`}>
                        {apt.status}
                      </Badge>
                    )}
                  </div>
                );
              });
            })}
          </div>
        </div>
      </div>
    </div>
  );
};


export default function Calendar() {
  const [appointments, setAppointments] = useState([]);
  const [contractors, setContractors] = useState([]);
  const [loading, setLoading] = useState(true);
  const [currentDate, setCurrentDate] = useState(new Date());
  const [viewMode, setViewMode] = useState('week'); // 'day', 'week', 'month'
  const [selectedAppointment, setSelectedAppointment] = useState(null);
  const [isDialogOpen, setIsDialogOpen] = useState(false);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setLoading(true);
    try {
      const [appointmentData, contractorData] = await Promise.all([
        Appointment.list('-appointment_date'),
        Contractor.list()
      ]);
      setAppointments(appointmentData);
      setContractors(contractorData);
    } catch (error) {
      console.error('שגיאה בטעינת נתונים:', error);
    }
    setLoading(false);
  };

  const handleStatusUpdate = async (newStatus) => {
    if (selectedAppointment) {
      try {
        await Appointment.update(selectedAppointment.id, { status: newStatus });
        setIsDialogOpen(false);
        setSelectedAppointment(null);
        await loadData();
      } catch (error) {
        console.error('שגיאה בעדכון סטטוס:', error);
        alert('שגיאה בעדכון הסטטוס. נא לנסות שוב.');
      }
    }
  };

  const handlePrev = () => {
    if (viewMode === 'day') setCurrentDate(subDays(currentDate, 1));
    else if (viewMode === 'week') setCurrentDate(subWeeks(currentDate, 1));
    else setCurrentDate(subMonths(currentDate, 1));
  };

  const handleNext = () => {
    if (viewMode === 'day') setCurrentDate(addDays(currentDate, 1));
    else if (viewMode === 'week') setCurrentDate(addWeeks(currentDate, 1));
    else setCurrentDate(addMonths(currentDate, 1));
  };

  const renderHeaderDate = () => {
    if (viewMode === 'day') return format(currentDate, 'eeee, d MMMM yyyy', { locale: he });
    if (viewMode === 'week') {
      const weekStart = startOfWeek(currentDate, { weekStartsOn: 0 });
      const weekEnd = endOfWeek(currentDate, { weekStartsOn: 0 });
      return `${format(weekStart, 'd MMM')} - ${format(weekEnd, 'd MMM yyyy', { locale: he })}`;
    }
    return format(currentDate, 'MMMM yyyy', { locale: he });
  };
  
  const handleAppointmentClick = (apt) => {
    setSelectedAppointment(apt);
    setIsDialogOpen(true);
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-screen">
        <Loader2 className="w-12 h-12 animate-spin text-blue-600" />
      </div>
    );
  }

  return (
    <PermissionGate>
      <div className="p-6 space-y-6 bg-gradient-to-br from-blue-50 to-green-50 min-h-screen flex flex-col">
        {/* Calendar Toolbar */}
        <div className="flex flex-wrap items-center justify-between gap-4 bg-white/80 p-4 rounded-xl shadow-md border border-blue-200">
          <div className="flex items-center gap-2">
            <Button variant="outline" onClick={handlePrev}>
              <ChevronRight className="w-4 h-4" />
            </Button>
            <Button variant="outline" onClick={() => setCurrentDate(new Date())}>היום</Button>
            <Button variant="outline" onClick={handleNext}>
              <ChevronLeft className="w-4 h-4" />
            </Button>
          </div>
          <h2 className="text-xl font-bold text-gray-800 text-center flex-1">
            {renderHeaderDate()}
          </h2>
          <div className="flex items-center gap-2">
            <Button variant={viewMode === 'day' ? 'default' : 'outline'} onClick={() => setViewMode('day')}>יום</Button>
            <Button variant={viewMode === 'week' ? 'default' : 'outline'} onClick={() => setViewMode('week')}>שבוע</Button>
            <Button variant={viewMode === 'month' ? 'default' : 'outline'} onClick={() => setViewMode('month')}>חודש</Button>
          </div>
        </div>

        {/* מקרא קבלנים */}
        <ContractorLegend contractors={contractors} appointments={appointments} />

        {/* Calendar Grid */}
        {viewMode === 'month' && <MonthView currentDate={currentDate} appointments={appointments} onAppointmentClick={handleAppointmentClick} contractors={contractors} />}
        {viewMode === 'week' && <WeekView currentDate={currentDate} appointments={appointments} onAppointmentClick={handleAppointmentClick} contractors={contractors} />}
        {viewMode === 'day' && <DayView currentDate={currentDate} appointments={appointments} onAppointmentClick={handleAppointmentClick} contractors={contractors} />}

        {/* Dialog for appointment management */}
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
          <DialogContent>
            <DialogHeader>
              <DialogTitle>ניהול תיאום</DialogTitle>
            </DialogHeader>
            {selectedAppointment && (
              <div className="space-y-4 py-4">
                <div className="bg-gray-50 p-4 rounded-lg space-y-2">
                  <p><strong>קבלן:</strong> {selectedAppointment.contractor_name}</p>
                  <p><strong>יישוב:</strong> {selectedAppointment.settlement_name}</p>
                  <p><strong>סוג פק"ע:</strong> {selectedAppointment.task_type}</p>
                  <p><strong>תאריך:</strong> {new Date(selectedAppointment.appointment_date).toLocaleDateString('he-IL')}</p>
                  <p><strong>שעות:</strong> {selectedAppointment.time_slot}</p>
                  <p><strong>סטטוס נוכחי:</strong> 
                    <Badge className={`mr-2 ${statusColors[selectedAppointment.status]}`}>
                      {selectedAppointment.status}
                    </Badge>
                  </p>
                </div>
                
                <div className="flex flex-col gap-3">
                  <h4 className="font-semibold">עדכון סטטוס:</h4>
                  <div className="grid grid-cols-2 gap-2">
                    <Button 
                      variant="outline" 
                      onClick={() => handleStatusUpdate('מתוכנן')}
                      disabled={selectedAppointment.status === 'מתוכנן'}
                    >
                      מתוכנן
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => handleStatusUpdate('בביצוע')}
                      disabled={selectedAppointment.status === 'בביצוע'}
                    >
                      בביצוע
                    </Button>
                    <Button 
                      variant="outline" 
                      onClick={() => handleStatusUpdate('הושלם')}
                      disabled={selectedAppointment.status === 'הושלם'}
                    >
                      הושלם
                    </Button>
                    <Button 
                      variant="destructive" 
                      onClick={() => handleStatusUpdate('בוטל')}
                      disabled={selectedAppointment.status === 'בוטל'}
                    >
                      בטל תיאום
                    </Button>
                  </div>
                </div>
              </div>
            )}
            <DialogFooter>
              <Button variant="outline" onClick={() => setIsDialogOpen(false)}>
                סגור
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>
    </PermissionGate>
  );
}
