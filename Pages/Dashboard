import React, { useState, useEffect } from "react";
import { Settlement } from "@/entities/Settlement";
import { Contractor } from "@/entities/Contractor";
import { User } from "@/entities/User";
import { ContractorAvailability } from "@/entities/ContractorAvailability";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import {
  MapPin,
  Building2,
  Users,
  FileSpreadsheet,
  AlertTriangle,
  Search
} from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";

import MapView from "../components/map/MapView";
import RegionFilters from "../components/filters/RegionFilters";
import { PermissionGate } from '../components/auth/PermissionGate';

export default function Dashboard() {
  const [settlements, setSettlements] = useState([]);
  const [selectedRegion, setSelectedRegion] = useState('הכל');
  const [selectedSubRegion, setSelectedSubRegion] = useState('הכל');
  const [selectedSettlement, setSelectedSettlement] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [user, setUser] = useState(null);
  const [contractors, setContractors] = useState([]);
  const [contractorAvailabilities, setContractorAvailabilities] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    setLoading(true);
    try {
      const [settlementData, userData, contractorData, contractorAvailabilityData] = await Promise.all([
        Settlement.list('-updated_date'),
        User.me(),
        Contractor.list(),
        ContractorAvailability.list()
      ]);
      setSettlements(settlementData);
      setUser(userData);
      setContractors(contractorData);
      setContractorAvailabilities(contractorAvailabilityData);
    } catch (err) {
      console.error("Error loading data:", err);
      setError('שגיאה בטעינת הנתונים');
    }
    setLoading(false);
  };

  // Filter settlements based on the search term
  const settlementsForMapAndDetails = settlements.filter(settlement => {
    const matchesSearch = searchTerm === '' ||
                          settlement.name?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          settlement.address?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          settlement.region?.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          settlement.sub_region?.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesSearch;
  });

  // פונקציה משופרת למציאת קבלן ברירת מחדל עם לוגיקה מתקדמת
  const findDefaultContractorName = (settlement, allContractors, contractorAvailabilities) => {
    if (!settlement || !allContractors || allContractors.length === 0) {
      return null;
    }

    const activeContractors = allContractors.filter(c => c.active);

    // **עדיפות 1: בדיקת הקצאה ישירה דרך contractor_1**
    if (settlement.contractor_1) {
      const directAssignedContractor = activeContractors.find(c => c.id === settlement.contractor_1);
      if (directAssignedContractor) {
        console.log(`🎯 קבלן מוקצה ישירות: ${directAssignedContractor.name} ליישוב ${settlement.name}`);
        return directAssignedContractor.name;
      }
    }

    // **עדיפות 2: אלגוריתם מתקדם לבחירת קבלן לפי ציון מורכב**
    
    // פונקציה לחישוב ציון גאוגרפי
    const getGeographicPriorityScore = (contractor) => {
      if (contractor.priority_settlements?.includes(settlement.name)) return 100; // עדיפות מקסימלית ליישובי עדיפות
      if (settlement.sub_region && contractor.sub_regions?.includes(settlement.sub_region)) return 75; // עדיפות גבוהה לתת-אזור
      if (settlement.region && contractor.regions?.includes(settlement.region)) return 50; // עדיפות בסיסית לאזור
      return 0; // אין התאמה גאוגרפית
    };
    
    // פונקציה לחישוב ציון זמינות
    const getAvailabilityScore = (contractor) => {
      // בדיקת זמינות ספציפית ליישוב
      const specificAvailability = contractorAvailabilities?.find(av => 
        av.contractor_id === contractor.contractor_id && 
        av.settlement_name === settlement.name
      );
      
      if (specificAvailability) {
        // יש זמינות ספציפית - ציון גבוה
        const daysCount = specificAvailability.days_of_week?.length || 0;
        return 50 + (daysCount * 5); // בסיס של 50 + 5 נקודות לכל יום זמין
      }
      
      // אם יש זמינות ברירת מחדל
      if (contractor.default_hours) {
        return 30; // ציון בסיסי לזמינות ברירת מחדל
      }
      
      return 10; // ציון מינימלי אם אין מידע זמינות
    };
    
    // פונקציה לחישוב ציון עדיפות קבלן כללית
    const getContractorPriorityScore = (priorityString) => {
      switch (priorityString) {
        case 'גבוה': return 30;
        case 'רגיל': return 20;
        case 'נמוך': return 10;
        default: return 15; // ברירת מחדל
      }
    };

    // פונקציה לחישוב ציון סוגי משימות (מגוון = טוב יותר)
    const getTaskTypesScore = (contractor) => {
      const taskTypesCount = contractor.task_types?.length || 0;
      return Math.min(taskTypesCount * 2, 20); // מקסימום 20 נקודות
    };

    // יצירת רשימת מועמדים עם ציונים
    const candidates = activeContractors
      .map(contractor => {
        const geoScore = getGeographicPriorityScore(contractor);
        const availabilityScore = getAvailabilityScore(contractor);
        const priorityScore = getContractorPriorityScore(contractor.priority);
        const taskTypesScore = getTaskTypesScore(contractor);
        
        // ציון כולל
        const totalScore = geoScore + availabilityScore + priorityScore + taskTypesScore;
        
        return {
          contractor,
          geoScore,
          availabilityScore,
          priorityScore,
          taskTypesScore,
          totalScore
        };
      })
      .filter(candidate => candidate.geoScore > 0) // רק קבלנים עם התאמה גאוגרפית
      .sort((a, b) => {
        // מיון לפי ציון כולל (גבוה לנמוך)
        if (a.totalScore !== b.totalScore) {
          return b.totalScore - a.totalScore;
        }
        
        // במקרה של תיקו - מיון לפי ציון גאוגרפי
        if (a.geoScore !== b.geoScore) {
          return b.geoScore - a.geoScore;
        }
        
        // במקרה של תיקו נוסף - מיון לפי זמינות
        return b.availabilityScore - a.availabilityScore;
      });

    if (candidates.length === 0) {
      console.log(`❌ לא נמצא קבלן מתאים ליישוב ${settlement.name}`);
      return null;
    }

    const selectedCandidate = candidates[0];
    
    console.log(`🏆 נבחר קבלן: ${selectedCandidate.contractor.name} ליישוב ${settlement.name}`);
    console.log(`📊 ציונים: גיאוגרפי=${selectedCandidate.geoScore}, זמינות=${selectedCandidate.availabilityScore}, עדיפות=${selectedCandidate.priorityScore}, משימות=${selectedCandidate.taskTypesScore}, סה"כ=${selectedCandidate.totalScore}`);
    
    return selectedCandidate.contractor.name;
  };

  if (loading) {
    return (
      <div className="p-6 space-y-6">
        <Skeleton className="h-8 w-64" />
        <div className="grid grid-cols-1 lg:grid-cols-4 gap-6">
          <Skeleton className="h-32" />
          <Skeleton className="h-32" />
          <Skeleton className="h-32" />
          <Skeleton className="h-32" />
        </div>
        <Skeleton className="h-96" />
      </div>
    );
  }

  const stats = {
    total: settlements.length,
    regions: [...new Set(settlements.map(s => s.region))].filter(Boolean).length,
    withContractors: settlements.filter(settlement => {
      return contractors.some(contractor => {
        if (!contractor.active) return false;

        // Check for direct assignment first, consistent with new findDefaultContractorName logic
        if (settlement.contractor_1 && contractor.id === settlement.contractor_1) {
          return true;
        }
        
        if (contractor.priority_settlements?.includes(settlement.name)) {
          return true;
        }

        if (settlement.sub_region && contractor.sub_regions?.includes(settlement.sub_region)) {
          return true;
        }

        if (settlement.region && contractor.regions?.includes(settlement.region)) {
          return true;
        }
        
        return false;
      });
    }).length,
    withCoordinates: settlements.filter(s => s.latitude && s.longitude).length
  };

  return (
    <PermissionGate>
      <div className="p-6 space-y-6 bg-gradient-to-br from-blue-50 to-green-50 min-h-screen">
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">מפת יישובים</h1>
            <p className="text-gray-600 mt-1">צפייה בפריסת היישובים והקבלנים</p>
          </div>
          <div className="relative w-full lg:w-1/3">
            <Input
              type="text"
              placeholder="חיפוש יישוב, כתובת, אזור..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pr-10"
            />
            <Search className="absolute right-3 top-1/2 -translate-y-1/2 text-gray-400 w-5 h-5" />
          </div>
        </div>

        {error && (
          <Alert variant="destructive" className="border-red-200 bg-red-50">
            <AlertTriangle className="h-4 w-4" />
            <AlertDescription>{error}</AlertDescription>
          </Alert>
        )}

        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
          <Card className="bg-white/80 backdrop-blur border-blue-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">סה"כ יישובים</CardTitle>
              <Building2 className="h-4 w-4 text-blue-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-blue-700">{stats.total}</div>
            </CardContent>
          </Card>

          <Card className="bg-white/80 backdrop-blur border-green-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">אזורים</CardTitle>
              <MapPin className="h-4 w-4 text-green-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-green-700">{stats.regions}</div>
            </CardContent>
          </Card>

          <Card className="bg-white/80 backdrop-blur border-orange-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">עם קבלנים</CardTitle>
              <Users className="h-4 w-4 text-orange-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-orange-700">{stats.withContractors}</div>
            </CardContent>
          </Card>

          <Card className="bg-white/80 backdrop-blur border-purple-200">
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium">ממוקמים במפה</CardTitle>
              <FileSpreadsheet className="h-4 w-4 text-purple-600" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-purple-700">{stats.withCoordinates}</div>
            </CardContent>
          </Card>
        </div>

        <RegionFilters
          settlements={settlements}
          selectedRegion={selectedRegion}
          setSelectedRegion={setSelectedRegion}
          selectedSubRegion={setSelectedSubRegion}
          searchTerm={searchTerm}
          setSearchTerm={setSearchTerm}
        />

        <div className="grid grid-cols-1 xl:grid-cols-3 gap-6">
          <div className="xl:col-span-2">
            <Card className="h-[600px] overflow-hidden bg-white/80 backdrop-blur border-blue-200 shadow-xl">
              <CardContent className="p-0 h-full">
                <MapView
                  settlements={settlementsForMapAndDetails}
                  selectedRegion={selectedRegion}
                  selectedSubRegion={selectedSubRegion}
                  onSettlementSelect={setSelectedSettlement}
                />
              </CardContent>
            </Card>
          </div>

          <div>
            <Card className="h-[600px] bg-white/80 backdrop-blur border-blue-200 shadow-xl">
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <MapPin className="w-5 h-5 text-blue-600" />
                  פרטי יישוב
                </CardTitle>
              </CardHeader>
              <CardContent className="h-full overflow-y-auto pb-6">
                {selectedSettlement ? (
                  (() => {
                    const defaultContractor = findDefaultContractorName(selectedSettlement, contractors, contractorAvailabilities);
                    return (
                      <div className="space-y-4">
                        <div>
                          <h3 className="text-xl font-bold text-gray-900 mb-2">
                            {selectedSettlement.name}
                          </h3>
                          <div className="flex flex-wrap gap-2">
                            <span className="bg-blue-100 text-blue-700 px-3 py-1 rounded-full text-sm">
                              {selectedSettlement.region}
                            </span>
                            {selectedSettlement.sub_region && (
                              <span className="bg-green-100 text-green-700 px-3 py-1 rounded-full text-sm">
                                {selectedSettlement.sub_region}
                              </span>
                            )}
                          </div>
                        </div>

                        {selectedSettlement.address && (
                          <div>
                            <h4 className="font-semibold text-gray-700 mb-1">כתובת</h4>
                            <p className="text-gray-600">{selectedSettlement.address}</p>
                          </div>
                        )}

                        {(selectedSettlement.contact_person || selectedSettlement.contact_person_phone) && (
                          <div>
                            <h4 className="font-semibold text-gray-700 mb-1">איש קשר</h4>
                            <p className="text-gray-600">{selectedSettlement.contact_person}</p>
                            {selectedSettlement.contact_person_phone && <p className="text-gray-600">{selectedSettlement.contact_person_phone}</p>}
                          </div>
                        )}

                        {selectedSettlement.operating_hours && (
                          <div>
                            <h4 className="font-semibold text-gray-700 mb-1">שעות פעילות</h4>
                            <p className="text-gray-600">{selectedSettlement.operating_hours}</p>
                          </div>
                        )}

                        {selectedSettlement.notes && (
                           <div>
                            <h4 className="font-semibold text-gray-700 mb-1">הערות</h4>
                            <p className="text-gray-600 whitespace-pre-wrap">{selectedSettlement.notes}</p>
                          </div>
                        )}

                        {defaultContractor && (
                          <div>
                            <h4 className="font-semibold text-gray-700 mb-2">קבלן ברירת מחדל</h4>
                            <div className="space-y-2">
                              <div className="flex items-center gap-2">
                                <Users className="w-4 h-4 text-green-500" />
                                <span>{defaultContractor}</span>
                              </div>
                            </div>
                          </div>
                        )}

                        {selectedSettlement.arrival_days && selectedSettlement.arrival_days.length > 0 && (
                          <div>
                            <h4 className="font-semibold text-gray-700 mb-2">ימי הגעה</h4>
                            <div className="flex flex-wrap gap-2">
                              {selectedSettlement.arrival_days.map((day, i) => (
                                <span key={i} className="bg-orange-100 text-orange-700 px-2 py-1 rounded text-sm">
                                  {day}
                                </span>
                              ))}
                            </div>
                          </div>
                        )}
                      </div>
                    );
                  })()
                ) : (
                  <div className="flex items-center justify-center h-full text-gray-500">
                    <div className="text-center">
                      <MapPin className="w-12 h-12 mx-auto mb-3 text-gray-300" />
                      <p>בחר יישוב במפה לצפייה בפרטים</p>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </PermissionGate>
  );
}