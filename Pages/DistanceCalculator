
import React, { useState, useEffect } from "react";
import { Settlement } from "@/entities/Settlement";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Alert, AlertDescription } from "@/components/ui/alert";
import { Badge } from "@/components/ui/badge";
import {
  MapPin,
  Navigation,
  Clock,
  Route,
  Calculator,
  AlertTriangle,
  Info,
  Loader2
} from "lucide-react";
import { MapContainer, TileLayer, Marker, Popup, Polyline, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';
import { createPageUrl } from "@/utils";
import { PermissionGate } from '../components/auth/PermissionGate.jsx';

// תיקון אייקונים של Leaflet
delete L.Icon.Default.prototype._getIconUrl;
L.Icon.Default.mergeOptions({
  iconRetinaUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon-2x.png',
  iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
  shadowUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-shadow.png',
});

const MapUpdater = ({ from, to, route }) => {
  const map = useMap();
  useEffect(() => {
    if (route && route.length > 0) {
      const bounds = L.latLngBounds(route);
      map.fitBounds(bounds, { padding: [50, 50] });
    } else if (from && to) {
      const bounds = L.latLngBounds([
        [from.latitude, from.longitude],
        [to.latitude, to.longitude]
      ]);
      map.fitBounds(bounds, { padding: [50, 50] });
    } else if (from) {
        map.setView([from.latitude, from.longitude], 10);
    } else if (to) {
        map.setView([to.latitude, to.longitude], 10);
    }
  }, [from, to, route, map]);
  return null;
};

// חישוב מרחק אווירי (Haversine) - תקין
const calculateHaversineDistance = (lat1, lon1, lat2, lon2) => {
  const R = 6371; // רדיוס כדור הארץ בקילומטרים
  const dLat = (lat2 - lat1) * Math.PI / 180;
  const dLon = (lon2 - lon1) * Math.PI / 180;
  const a = 
    Math.sin(dLat/2) * Math.sin(dLat/2) +
    Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * 
    Math.sin(dLon/2) * Math.sin(dLon/2);
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));
  return R * c;
};

// הערכת זמן נסיעה (בהערכה גסה)
const estimateDrivingTime = (distanceKm) => {
  // הערכה גסה מעודכנת - מכפילים את המרחק האווירי פי 1.6
  // כדי להביא בחשבון דרכים עוקפות ותנאי שטח
  const adjustedDistance = distanceKm * 1.6; // מקדם תיקון לדרכים עוקפות
  const avgSpeedKmh = 45; // מהירות ממוצעת נמוכה יותר
  const hours = adjustedDistance / avgSpeedKmh;
  const totalMinutes = Math.round(hours * 60);
  
  if (totalMinutes < 60) {
    return `${totalMinutes} דקות`;
  } else {
    const h = Math.floor(totalMinutes / 60);
    const m = totalMinutes % 60;
    return m > 0 ? `${h} שעות ו-${m} דקות` : `${h} שעות`;
  }
};

export default function DistanceCalculator() {
  const [settlements, setSettlements] = useState([]);
  const [fromSettlement, setFromSettlement] = useState(null);
  const [toSettlement, setToSettlement] = useState(null);
  const [result, setResult] = useState(null);
  const [loading, setLoading] = useState(true);
  const [calculating, setCalculating] = useState(false);

  useEffect(() => {
    const loadData = async () => {
      setLoading(true);
      try {
        // Only load settlements, no API key needed anymore for calculation logic
        const settlementData = await Settlement.list();
        const settlementsWithCoords = settlementData.filter(s => s.latitude && s.longitude);
        setSettlements(settlementsWithCoords);
      } catch (error) {
        console.error("שגיאה בטעינת נתונים:", error);
      }
      setLoading(false);
    };
    loadData();
  }, []);

  const handleCalculate = async () => {
    if (!fromSettlement || !toSettlement) {
      alert("יש לבחור גם יישוב מקור וגם יישוב יעד");
      return;
    }
    
    setCalculating(true);
    setResult(null);

    if (fromSettlement.id === toSettlement.id) {
      setResult({ error: "לא ניתן לחשב מרחק מיישוב לעצמו" });
      setCalculating(false);
      return;
    }

    try {
      console.log("מתחיל חישוב עבור:", fromSettlement.name, "→", toSettlement.name);
      console.log("קואורדינטות מקור:", fromSettlement.latitude, fromSettlement.longitude);
      console.log("קואורדינטות יעד:", toSettlement.latitude, toSettlement.longitude);
      
      // חישוב מרחק אווירי תקין
      const airDistance = calculateHaversineDistance(
        fromSettlement.latitude,
        fromSettlement.longitude,
        toSettlement.latitude,
        toSettlement.longitude
      );
      
      console.log("מרחק אווירי מחושב:", airDistance.toFixed(1), "ק\"מ");
      
      const estimatedTime = estimateDrivingTime(airDistance);
      const estimatedDrivingDistance = airDistance * 1.6; // הערכה גסה לנסיעה בכבישים
      
      setResult({
        distance: `${airDistance.toFixed(1)} ק"מ`,
        estimatedDriving: `~${estimatedDrivingDistance.toFixed(0)} ק"מ`,
        duration: estimatedTime,
        polyline: [
          [fromSettlement.latitude, fromSettlement.longitude],
          [toSettlement.latitude, toSettlement.longitude]
        ],
        from: fromSettlement,
        to: toSettlement,
        isEstimate: true,
      });

    } catch (e) {
      console.error("Error calculating route:", e);
      setResult({ error: `שגיאה בחישוב המסלול: ${e.message}` });
    } finally {
      setCalculating(false);
    }
  };

  const handleSwap = () => {
    const temp = fromSettlement;
    setFromSettlement(toSettlement);
    setToSettlement(temp);
    setResult(null);
  };

  if (loading) {
    return (
      <div className="p-6 space-y-6">
        <div className="animate-pulse">
          <div className="h-8 bg-gray-200 rounded w-64 mb-4"></div>
          <div className="h-32 bg-gray-200 rounded"></div>
        </div>
      </div>
    );
  }

  return (
    <PermissionGate>
      <div className="p-6 space-y-6 bg-gradient-to-br from-blue-50 to-green-50 min-h-screen">
        <div className="max-w-7xl mx-auto">
          <div className="flex items-center gap-3 mb-6">
            <div className="w-10 h-10 bg-gradient-to-r from-blue-500 to-green-500 rounded-xl flex items-center justify-center">
              <Calculator className="w-5 h-5 text-white" />
            </div>
            <div>
              <h1 className="text-3xl font-bold text-gray-900">חישוב מרחקים</h1>
              <p className="text-gray-600 mt-1">חישוב מרחק אווירי והערכת זמן נסיעה</p>
            </div>
          </div>

          {/* אזהרה ברורה על מגבלות המערכת */}
          <Alert className="mb-6 bg-yellow-50 border-yellow-300">
            <AlertTriangle className="h-4 w-4 text-yellow-600" />
            <AlertDescription className="text-yellow-800">
              <strong>⚠️ חשוב לדעת:</strong> המערכת מציגה כרגע <strong>מרחק אווירי בלבד</strong> (קו ישר). 
              המרחק בנסיעה בפועל יהיה גדול יותר משמעותית (פי 1.5-2.5) בגלל דרכים עוקפות, הרים ועיכובי תנועה.
              <br />
              <strong>לדוגמה:</strong> בית אורן ← נווה חריף = 150 ק"מ אווירי, אבל ~370 ק"מ נסיעה בפועל.
            </AlertDescription>
          </Alert>

          {settlements.length === 0 ? (
            <Alert variant="destructive">
              <AlertTriangle className="h-4 w-4" />
              <AlertDescription>
                לא נמצאו יישובים עם קואורדינטות. נא להוסיף יישובים עם קואורדינטות תקינות בממשק הניהול.
              </AlertDescription>
            </Alert>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 items-start">
              <div className="space-y-6">
                {/* כלי החישוב */}
                <Card className="bg-white/80 backdrop-blur border-blue-200 shadow-lg">
                  <CardHeader>
                    <CardTitle className="flex items-center gap-2">
                      <Route className="w-5 h-5 text-blue-600" />
                      בחירת יישובים
                    </CardTitle>
                  </CardHeader>
                  <CardContent className="space-y-6">
                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-green-500" />
                        מ-יישוב:
                      </label>
                      <Select
                        value={fromSettlement?.id || ''}
                        onValueChange={(value) => {
                          const settlement = settlements.find(s => s.id === value);
                          setFromSettlement(settlement);
                          setResult(null);
                        }}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="בחר יישוב מקור" />
                        </SelectTrigger>
                        <SelectContent>
                          {settlements.map((settlement) => (
                            <SelectItem key={settlement.id} value={settlement.id}>
                              <div className="flex items-center gap-2">
                                <span>{settlement.name}</span>
                                <Badge variant="outline" className="text-xs">
                                  {settlement.region}
                                </Badge>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <div className="flex justify-center">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={handleSwap}
                        disabled={!fromSettlement && !toSettlement}
                        className="bg-gray-50 hover:bg-gray-100"
                      >
                        <Navigation className="w-4 h-4 transform rotate-90" />
                      </Button>
                    </div>

                    <div className="space-y-2">
                      <label className="text-sm font-medium text-gray-700 flex items-center gap-2">
                        <MapPin className="w-4 h-4 text-red-500" />
                        אל-יישוב:
                      </label>
                      <Select
                        value={toSettlement?.id || ''}
                        onValueChange={(value) => {
                          const settlement = settlements.find(s => s.id === value);
                          setToSettlement(settlement);
                          setResult(null);
                        }}
                      >
                        <SelectTrigger className="bg-white">
                          <SelectValue placeholder="בחר יישוב יעד" />
                        </SelectTrigger>
                        <SelectContent>
                          {settlements.map((settlement) => (
                            <SelectItem key={settlement.id} value={settlement.id}>
                              <div className="flex items-center gap-2">
                                <span>{settlement.name}</span>
                                <Badge variant="outline" className="text-xs">
                                  {settlement.region}
                                </Badge>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </div>

                    <Button
                      onClick={handleCalculate}
                      disabled={!fromSettlement || !toSettlement || calculating}
                      className="w-full bg-blue-600 hover:bg-blue-700"
                    >
                      {calculating ? (
                          <>
                              <Loader2 className="w-4 h-4 mr-2 animate-spin" />
                              מחשב...
                          </>
                      ) : (
                          <>
                              <Calculator className="w-4 h-4 mr-2" />
                              חשב מרחק
                          </>
                      )}
                    </Button>
                  </CardContent>
                </Card>

                {/* תוצאות */}
                {result && (
                  <Card className="bg-white/80 backdrop-blur border-orange-200 shadow-lg">
                    <CardHeader>
                      <CardTitle className="flex items-center gap-2">
                        <Navigation className="w-5 h-5 text-orange-600" />
                        תוצאות החישוב (הערכה בלבד)
                      </CardTitle>
                    </CardHeader>
                    <CardContent>
                      {result.error ? (
                        <Alert variant="destructive">
                          <AlertTriangle className="h-4 w-4" />
                          <AlertDescription>{result.error}</AlertDescription>
                        </Alert>
                      ) : (
                        <div className="space-y-6">
                          <div className="text-center p-4 bg-gradient-to-r from-orange-50 to-red-50 rounded-lg border-2 border-orange-200">
                            <div className="text-2xl font-bold text-orange-700 mb-1">
                              {result.distance}
                            </div>
                            <div className="text-sm text-orange-600 font-medium">
                              מרחק "ציפור" (קו ישר)
                            </div>
                          </div>

                          <div className="text-center p-4 bg-gradient-to-r from-red-50 to-orange-50 rounded-lg border-2 border-red-200">
                            <div className="text-2xl font-bold text-red-700 mb-1">
                              {result.estimatedDriving} נסיעה
                            </div>
                            <div className="text-sm text-red-600 font-medium">
                              מרחק נסיעה משוער (לא מדויק!)
                            </div>
                          </div>

                          <div className="text-center p-4 bg-gradient-to-r from-gray-50 to-blue-50 rounded-lg">
                            <div className="flex items-center justify-center gap-2 text-xl font-bold text-gray-700 mb-1">
                              <Clock className="w-5 h-5" />
                              {result.duration}
                            </div>
                            <div className="text-sm text-gray-600">
                              זמן נסיעה מוערך (גס מאוד)
                            </div>
                          </div>

                          <Alert className="bg-red-50 border-red-200">
                            <Info className="h-4 w-4 text-red-600" />
                            <AlertDescription className="text-red-800">
                              <strong>לתשומת לבך:</strong> למרחקים ארוכים (צפון-דרום) ההפרש בין מרחק אווירי למרחק נסיעה יכול להיות משמעותי מאוד. 
                              המלצה: השתמש ב-Waze או Google Maps לתכנון מסלול מדויק.
                            </AlertDescription>
                          </Alert>
                        </div>
                      )}
                    </CardContent>
                  </Card>
                )}
              </div>

              {/* מפה */}
              <div className="h-[400px] lg:h-[600px] w-full">
                <Card className="h-full w-full bg-white/80 backdrop-blur border-gray-200 shadow-lg rounded-2xl overflow-hidden">
                  <MapContainer center={[31.5, 34.75]} zoom={8} className="h-full w-full">
                    <TileLayer
                      attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
                      url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    />
                    {fromSettlement && (
                      <Marker position={[fromSettlement.latitude, fromSettlement.longitude]}>
                        <Popup>מקור: {fromSettlement.name}</Popup>
                      </Marker>
                    )}
                    {toSettlement && (
                      <Marker position={[toSettlement.latitude, toSettlement.longitude]}>
                        <Popup>יעד: {toSettlement.name}</Popup>
                      </Marker>
                    )}
                    {result && result.polyline && (
                      <Polyline
                        positions={result.polyline}
                        color={"red"} // Always red for air distance polyline
                        dashArray={"5, 10"} // Always dashed for air distance
                        weight={3}
                      />
                    )}
                    <MapUpdater from={fromSettlement} to={toSettlement} route={result?.polyline} />
                  </MapContainer>
                </Card>
              </div>
            </div>
          )}

          {/* סטטיסטיקות */}
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mt-6">
            <Card className="bg-white/60 backdrop-blur">
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-blue-700">{settlements.length}</div>
                <div className="text-sm text-gray-600">יישובים זמינים</div>
              </CardContent>
            </Card>

            <Card className="bg-white/60 backdrop-blur">
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-green-700">
                  {settlements.filter(s => s.region).length}
                </div>
                <div className="text-sm text-gray-600">יישובים עם אזור</div>
              </CardContent>
            </Card>

            <Card className="bg-white/60 backdrop-blur">
              <CardContent className="p-4 text-center">
                <div className="text-2xl font-bold text-purple-700">
                  {[...new Set(settlements.map(s => s.region))].length}
                </div>
                <div className="text-sm text-gray-600">אזורים שונים</div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </PermissionGate>
  );
}
